$grid-breakpoints: (
  xs: 0,
  sm: 576px,
  md: 768px,
  mycustomvar: 850px,
  lg: 992px,
  xl: 1200px
);

// Breakpoint viewport sizes and media queries.
//
// Breakpoints are defined as a map of (name: minimum width), order from small to large:
//
//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px)
//
// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.

// Name of the next breakpoint, or null for the last breakpoint.
//
//    >> breakpoint-next(sm)
//    md
//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    md
//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))
//    md
@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {
  $n: index($breakpoint-names, $name);
  @return if($n != null and $n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);
}

// Minimum breakpoint width. Null for the smallest (first) breakpoint.
//
//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    576px
@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {
  $min: map-get($breakpoints, $name);
  @return if($min != 0, $min, null);
}

// Maximum breakpoint width. Null for the largest (last) breakpoint.
// The maximum value is calculated as the minimum of the next one less 0.02px
// to work around the limitations of `min-` and `max-` prefixes and viewports with fractional widths.
// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max
// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.
// See https://bugs.webkit.org/show_bug.cgi?id=178261
//
//    >> breakpoint-max(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    767.98px
@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {
  $next: breakpoint-next($name, $breakpoints);
  @return if($next, breakpoint-min($next, $breakpoints) - 0.02, null);
}

// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front.
// Useful for making responsive utilities.
//
//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    ""  (Returns a blank string)
//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    "-sm"
@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {
  @return if(breakpoint-min($name, $breakpoints) == null, '', '-#{$name}');
}

// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.
// Makes the @content apply to the given breakpoint and wider.
@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {
  $min: breakpoint-min($name, $breakpoints);
  @if $min {
    @media (min-width: $min) {
      @content;
    }
  } @else {
    @content;
  }
}

// Media of at most the maximum breakpoint width. No query for the largest breakpoint.
// Makes the @content apply to the given breakpoint and narrower.
@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {
  $max: breakpoint-max($name, $breakpoints);
  @if $max {
    @media (max-width: $max) {
      @content;
    }
  } @else {
    @content;
  }
}

// Media that spans multiple breakpoint widths.
// Makes the @content apply between the min and max breakpoints
@mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {
  $min: breakpoint-min($lower, $breakpoints);
  $max: breakpoint-max($upper, $breakpoints);

  @if $min != null and $max != null {
    @media (min-width: $min) and (max-width: $max) {
      @content;
    }
  } @else if $max == null {
    @include media-breakpoint-up($lower, $breakpoints) {
      @content;
    }
  } @else if $min == null {
    @include media-breakpoint-down($upper, $breakpoints) {
      @content;
    }
  }
}

// Media between the breakpoint's minimum and maximum widths.
// No minimum for the smallest breakpoint, and no maximum for the largest one.
// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.
@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {
  $min: breakpoint-min($name, $breakpoints);
  $max: breakpoint-max($name, $breakpoints);

  @if $min != null and $max != null {
    @media (min-width: $min) and (max-width: $max) {
      @content;
    }
  } @else if $max == null {
    @include media-breakpoint-up($name, $breakpoints) {
      @content;
    }
  } @else if $min == null {
    @include media-breakpoint-down($name, $breakpoints) {
      @content;
    }
  }
}

@mixin card-deck-4 {
  o-card-horizontal,
  o-card-vertical,
  .card {
    flex: 1 0 19%;
    margin-top: 0;

    &:nth-of-type(n + 5) {
      margin-top: 30px;
    }
  }
}

@mixin card-deck-3 {
  o-card-horizontal,
  o-card-vertical,
  .card {
    flex: 1 0 25%;
    margin-top: 0;

    &:nth-of-type(n + 4) {
      margin-top: 30px;
    }
  }
}

@mixin card-deck-2 {
  o-card-horizontal,
  o-card-vertical,
  .card {
    flex: 1 0 35%;
    margin-top: 0;

    &:nth-of-type(n + 3) {
      margin-top: 30px;
    }
  }
}

@mixin card-deck-1 {
  o-card-horizontal,
  o-card-vertical,
  .card {
    flex: 1 0 55% !important;
    margin-top: 0;

    &:nth-of-type(n + 2) {
      margin-top: 30px;
    }
  }
}

::ng-deep {
  .card-deck {
    @include card-deck-2;
  }

  .card-deck {
    o-card-horizontal,
    o-card-vertical {
      .card {
        min-width: 100%;
        width: 100%;
        min-height: 100%;
        height: 100%;
      }
      margin-right: 15px;
      margin-bottom: 0;
      margin-left: 15px;
    }

    @include media-breakpoint-up(sm) {
      display: flex;
      flex-flow: row wrap;
      margin-right: -15px;
      margin-left: -15px;
    }

    @include media-breakpoint-down(xs) {
      o-card-horizontal,
      o-card-vertical,
      .card {
        &:nth-of-type(2) {
          margin-top: 30px;
        }
      }
    }
  }

  @include media-breakpoint-up(md) {
    .card-deck:not(.max-cards-2),
    .card-deck.max-cards-3 {
      @include card-deck-3;
    }
  }

  @include media-breakpoint-up(lg) {
    .card-deck:not(.max-cards-2):not(.max-cards-3) {
      @include card-deck-4;
    }
  }

  .card-deck.max-cards-1 {
    @include card-deck-1;
  }

  .card-deck.card-column {
    o-card-horizontal,
    o-card-vertical,
    .card {
      max-width: calc(calc(100% / 4) - 30px);

      @include media-breakpoint-down(md) {
        max-width: calc(calc(100% / 3) - 30px);
      }

      @include media-breakpoint-down(sm) {
        max-width: calc(calc(100% / 2) - 30px);
      }

      @include media-breakpoint-down(xs) {
        max-width: 100%;
      }
    }
  }

  .card-deck.max-cards-3.card-column {
    o-card-horizontal,
    o-card-vertical,
    .card {
      max-width: calc(calc(100% / 3) - 30px);

      @include media-breakpoint-down(sm) {
        max-width: calc(calc(100% / 2) - 30px);
      }

      @include media-breakpoint-down(xs) {
        max-width: 100%;
      }
    }
  }

  .card-deck.max-cards-2.card-column {
    o-card-horizontal,
    o-card-vertical,
    .card {
      max-width: calc(calc(100% / 2) - 30px);

      @include media-breakpoint-down(xs) {
        max-width: 100%;
      }
    }
  }

  .card-deck.max-cards-1.card-column {
    o-card-horizontal,
    o-card-vertical,
    .card {
      max-width: calc(calc(100% / 3) - 30px);

      &:nth-of-type(-n + 3) {
        margin-top: 0px;
      }

      @include media-breakpoint-down(sm) {
        max-width: calc(calc(100% / 2) - 30px);

        &:nth-of-type(-n + 3) {
          margin-top: 30px;
        }
      }

      @include media-breakpoint-down(xs) {
        max-width: 100%;
      }
    }
  }
}
